// json-filter

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.1.0'  // The ProGuard Gradle plugin.
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'eclipse'
    id 'idea'

    // keep dependencies up-to-date!
    id 'com.github.ben-manes.versions' version '0.39.0'

    // useful for creating immutable java beans
    id 'org.inferred.processors' version '3.6.0'

    // to ensure clean code
    id "net.ltgt.errorprone" version "2.0.2"

    // for deployment to Maven Central
    id "io.codearte.nexus-staging" version "0.30.0"

    // for building fat jar
    id "com.github.johnrengelman.shadow" version "7.1.0"
}

group   = 'com.arakelian'
version = '3.7.0'


apply from: "core.gradle"

wrapper { 
    gradleVersion = '7.2'
}

publishing.publications.mavenJava {
    pom {
        name = "Json Filter"
        description = "High-speed stream-based filtering of arbitrarily large JSON documents."
        url = "https://github.com/arakelian/json-filter"
        
        licenses {
            license {
                name = 'The Apache License, Version 2.0'
                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }
        
        developers {
            developer {
                id = 'arakelian'
                name = 'Greg Arakelian'
                email = 'greg@arakelian.com'
            }
        }
        
        scm {
            connection = 'scm:git:https://github.com/arakelian/json-filter.git'
            developerConnection = 'scm:git:git@github.com:arakelian/json-filter.git'
            url = 'https://github.com/arakelian/json-filter.git'
        }
    }
	pom.withXml {
		Node pomNode = asNode()
		pomNode.dependencies.'*'.findAll() {
		    it.artifactId.text() in [ 'value-annotations', 'guava', 'commons-io', 'commons-lang3' ]
		}.each() {
		    it.parent().remove(it)
		}
	}
}

dependencies {
    processor 'org.immutables:value:2.9.0-rc1'

    // annotations
    api 'org.immutables:value-annotations:2.9.0-rc1'
    
    // configure errorprone version
    errorprone 'com.google.errorprone:error_prone_core:2.9.0'

    // we shadow Guava due to frequent downstream compatibility issues
    shadow 'com.google.guava:guava:31.0.1-jre'

    // logging
    testImplementation 'org.apache.logging.log4j:log4j-api:2.14.1'
    testImplementation 'org.apache.logging.log4j:log4j-core:2.14.1'
    testImplementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.14.1'
    testImplementation 'org.slf4j:jcl-over-slf4j:1.7.32'
    testImplementation 'org.slf4j:jul-to-slf4j:1.7.32'
    api                'org.slf4j:slf4j-api:1.7.32'

    // for unit testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
}

shadowJar {
    //task.mergeServiceFiles()

    // we don't want poms for third-party stuff
    exclude 'META-INF/maven/**/*'
    exclude 'META-INF/**/*.SF'
    exclude 'META-INF/**/*.DSA'
    exclude 'META-INF/**/*.RSA'

    // we are only shadowing 'shadow' dependencies
    configurations = [
        project.configurations.shadow
    ]

    relocate 'org.apache.commons',      'repackaged.com.arakelian.json.org.apache.commons'
    relocate 'com.google.common',       'repackaged.com.arakelian.json.com.google.common'
    relocate 'com.google.thirdparty',   'repackaged.com.arakelian.json.com.google.thirdparty'
    relocate 'javax.annotation',        'repackaged.com.arakelian.json.javax.annotation'
}

minify {
    // classes in this jar are minified and copied to output jar
    injars shadowJar.archivePath
    
    // output jar
    outjars project.ext.minifyJarFile
    
    // jars required on classpath at runtime, including Java runtime
    libraryjars project.ext.libraryJars()

    // classes that we need to keep
    keep includedescriptorclasses:true, 'class com.arakelian.** { *; }'
}
